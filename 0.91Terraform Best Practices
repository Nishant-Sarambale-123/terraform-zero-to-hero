Here are **detailed Terraform Best Practices** across code quality, project organization, version control, collaboration, and debugging. These practices are essential to maintain scalability, readability, and security in team environments and production setups.

---

# ✅ **Terraform Best Practices**

---

## 🔹 1. Code Formatting & Style

### 🔧 Use `terraform fmt`

* Automatically formats your `.tf` files to follow the standard HCL style guide.
* Keeps code clean, readable, and consistent.

```bash
terraform fmt
```

✅ **Run it before every commit or in a CI pipeline.**

---

### 🔍 Use `terraform validate`

* Validates `.tf` code syntax and catches basic errors like missing arguments or invalid types.

```bash
terraform validate
```

✅ Should be used before `terraform plan` to detect issues early.

📚 Docs:
🔗 [terraform fmt](https://developer.hashicorp.com/terraform/cli/commands/fmt)
🔗 [terraform validate](https://developer.hashicorp.com/terraform/cli/commands/validate)

---

## 🔹 2. File Structure & Modularity

### 📁 Organize Files into Modules

**Recommended Root Layout:**

```
project/
├── main.tf
├── variables.tf
├── outputs.tf
├── terraform.tfvars
├── backend.tf
├── versions.tf
└── modules/
    └── vpc/
        ├── main.tf
        ├── variables.tf
        └── outputs.tf
```

### 📌 Benefits:

* Encourages reuse
* Makes code cleaner and maintainable
* Helps separate concerns (e.g., `network`, `compute`, `database` modules)

📚 Doc:
🔗 [Modules Documentation](https://developer.hashicorp.com/terraform/language/modules/syntax)

---

### 📛 Naming Conventions

Follow consistent naming for resources, variables, modules, and files:

| Item          | Convention Example              |
| ------------- | ------------------------------- |
| Variable name | `instance_type`, `db_password`  |
| Resource name | `aws_instance.web_server`       |
| Module folder | `network`, `compute`, `storage` |
| Output name   | `vpc_id`, `instance_ip`         |

✅ Use `snake_case` for all names.

---

## 🔹 3. Version Control Best Practices (Git)

### 🗂 Store Terraform Code in Git

* Version control your `.tf`, `.tfvars`, `.hcl` files.
* Allows rollback, change tracking, and collaboration.

### 📌 Example `.gitignore`

```bash
.terraform/
*.tfstate
*.tfstate.backup
*.tfvars
terraform.tfvars.json
.crash
```

✅ Never commit state files or secrets.

---

### 📌 Use `terraform.lock.hcl` to Pin Versions

This file locks provider versions to avoid accidental upgrades that can break infrastructure.

✅ Always commit this file to source control.

📚 Docs:
🔗 [Dependency Lock File](https://developer.hashicorp.com/terraform/language/files/dependency-lock)

---

## 🔹 4. Team Collaboration

### ☁️ Use Remote Backends

Use remote backends like **Terraform Cloud**, **S3 + DynamoDB**, **Azure Storage**, or **GCS** for storing state.

```hcl
terraform {
  backend "s3" {
    bucket         = "my-tf-state"
    key            = "env/prod/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-locks"
  }
}
```

✅ Enables:

* Shared state across teams
* Locking and consistency
* Security with encryption

📚 Docs:
🔗 [Backends](https://developer.hashicorp.com/terraform/language/settings/backends)

---

### 🛑 Avoid Sharing `.tfstate` Files Manually

* Sharing via email or drive causes drift and conflicts.
* Use backend locks to prevent simultaneous edits.

---

## 🔹 5. Debugging Terraform Issues

### 🔍 Use `terraform plan -out=plan.out`

* Saves the execution plan to a file.
* Ensures the exact plan is applied, even if the source code changes afterward.

```bash
terraform plan -out=plan.out
terraform apply plan.out
```

📚 Docs:
🔗 [terraform plan](https://developer.hashicorp.com/terraform/cli/commands/plan)

---

### 🐞 Enable Debug Logging with `TF_LOG`

Set the `TF_LOG` environment variable for detailed logs.

| Level | Description              |
| ----- | ------------------------ |
| TRACE | Very detailed debug info |
| DEBUG | Debug messages           |
| INFO  | General info messages    |
| WARN  | Warnings                 |
| ERROR | Only errors              |

```bash
export TF_LOG=DEBUG
terraform apply
```

To log to a file:

```bash
export TF_LOG_PATH=terraform.log
```

📚 Docs:
🔗 [Debugging Terraform](https://developer.hashicorp.com/terraform/internals/debugging)

---

## 🔐 Summary Table

| Area             | Best Practice                                           |
| ---------------- | ------------------------------------------------------- |
| Formatting       | Use `terraform fmt`                                     |
| Syntax checking  | Use `terraform validate`                                |
| Structure        | Use modular file and folder layout                      |
| Naming           | Use consistent `snake_case` names                       |
| Version Control  | Use Git + `.gitignore`, commit `terraform.lock.hcl`     |
| Secrets          | Use environment variables or secret managers            |
| State Management | Use remote backends, avoid local `.tfstate` sharing     |
| Collaboration    | Lock remote state, use Terraform Cloud or S3 + DynamoDB |
| Debugging        | Use `terraform plan -out=plan.out`, `TF_LOG=DEBUG`      |

---

Would you like me to generate a **PDF or a GitHub-style repo structure** for all these practices with sample code?
